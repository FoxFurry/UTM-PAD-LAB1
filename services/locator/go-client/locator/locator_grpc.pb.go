// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.3
// source: ServiceLocator/ServiceLocator/Protos/locator.proto

package locator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LocatorClient is the client API for Locator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocatorClient interface {
	RegisterService(ctx context.Context, in *RegisterServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceResponse, error)
}

type locatorClient struct {
	cc grpc.ClientConnInterface
}

func NewLocatorClient(cc grpc.ClientConnInterface) LocatorClient {
	return &locatorClient{cc}
}

func (c *locatorClient) RegisterService(ctx context.Context, in *RegisterServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Locator/RegisterService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locatorClient) GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceResponse, error) {
	out := new(GetServiceResponse)
	err := c.cc.Invoke(ctx, "/Locator/GetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocatorServer is the server API for Locator service.
// All implementations must embed UnimplementedLocatorServer
// for forward compatibility
type LocatorServer interface {
	RegisterService(context.Context, *RegisterServiceRequest) (*emptypb.Empty, error)
	GetService(context.Context, *GetServiceRequest) (*GetServiceResponse, error)
	mustEmbedUnimplementedLocatorServer()
}

// UnimplementedLocatorServer must be embedded to have forward compatible implementations.
type UnimplementedLocatorServer struct {
}

func (UnimplementedLocatorServer) RegisterService(context.Context, *RegisterServiceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterService not implemented")
}
func (UnimplementedLocatorServer) GetService(context.Context, *GetServiceRequest) (*GetServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (UnimplementedLocatorServer) mustEmbedUnimplementedLocatorServer() {}

// UnsafeLocatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocatorServer will
// result in compilation errors.
type UnsafeLocatorServer interface {
	mustEmbedUnimplementedLocatorServer()
}

func RegisterLocatorServer(s grpc.ServiceRegistrar, srv LocatorServer) {
	s.RegisterService(&Locator_ServiceDesc, srv)
}

func _Locator_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocatorServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Locator/RegisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocatorServer).RegisterService(ctx, req.(*RegisterServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Locator_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocatorServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Locator/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocatorServer).GetService(ctx, req.(*GetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Locator_ServiceDesc is the grpc.ServiceDesc for Locator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Locator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Locator",
	HandlerType: (*LocatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterService",
			Handler:    _Locator_RegisterService_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _Locator_GetService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ServiceLocator/ServiceLocator/Protos/locator.proto",
}
