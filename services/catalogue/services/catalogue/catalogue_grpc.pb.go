// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.3
// source: services/catalogue/catalogue.proto

package catalogue

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CatalogueClient is the client API for Catalogue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogueClient interface {
	AddListing(ctx context.Context, in *AddListingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAllListings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllListingsResponse, error)
	GetListingByTitle(ctx context.Context, in *GetListingByTitleRequest, opts ...grpc.CallOption) (*GetListingByTitleResponse, error)
	GetListingByID(ctx context.Context, in *GetListingByIDRequest, opts ...grpc.CallOption) (*GetListingByIDResponse, error)
}

type catalogueClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogueClient(cc grpc.ClientConnInterface) CatalogueClient {
	return &catalogueClient{cc}
}

func (c *catalogueClient) AddListing(ctx context.Context, in *AddListingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pad.catalogue.proto.Catalogue/AddListing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogueClient) GetAllListings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllListingsResponse, error) {
	out := new(GetAllListingsResponse)
	err := c.cc.Invoke(ctx, "/pad.catalogue.proto.Catalogue/GetAllListings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogueClient) GetListingByTitle(ctx context.Context, in *GetListingByTitleRequest, opts ...grpc.CallOption) (*GetListingByTitleResponse, error) {
	out := new(GetListingByTitleResponse)
	err := c.cc.Invoke(ctx, "/pad.catalogue.proto.Catalogue/GetListingByTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogueClient) GetListingByID(ctx context.Context, in *GetListingByIDRequest, opts ...grpc.CallOption) (*GetListingByIDResponse, error) {
	out := new(GetListingByIDResponse)
	err := c.cc.Invoke(ctx, "/pad.catalogue.proto.Catalogue/GetListingByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogueServer is the server API for Catalogue service.
// All implementations must embed UnimplementedCatalogueServer
// for forward compatibility
type CatalogueServer interface {
	AddListing(context.Context, *AddListingRequest) (*emptypb.Empty, error)
	GetAllListings(context.Context, *emptypb.Empty) (*GetAllListingsResponse, error)
	GetListingByTitle(context.Context, *GetListingByTitleRequest) (*GetListingByTitleResponse, error)
	GetListingByID(context.Context, *GetListingByIDRequest) (*GetListingByIDResponse, error)
	mustEmbedUnimplementedCatalogueServer()
}

// UnimplementedCatalogueServer must be embedded to have forward compatible implementations.
type UnimplementedCatalogueServer struct {
}

func (UnimplementedCatalogueServer) AddListing(context.Context, *AddListingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddListing not implemented")
}
func (UnimplementedCatalogueServer) GetAllListings(context.Context, *emptypb.Empty) (*GetAllListingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllListings not implemented")
}
func (UnimplementedCatalogueServer) GetListingByTitle(context.Context, *GetListingByTitleRequest) (*GetListingByTitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListingByTitle not implemented")
}
func (UnimplementedCatalogueServer) GetListingByID(context.Context, *GetListingByIDRequest) (*GetListingByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListingByID not implemented")
}
func (UnimplementedCatalogueServer) mustEmbedUnimplementedCatalogueServer() {}

// UnsafeCatalogueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogueServer will
// result in compilation errors.
type UnsafeCatalogueServer interface {
	mustEmbedUnimplementedCatalogueServer()
}

func RegisterCatalogueServer(s grpc.ServiceRegistrar, srv CatalogueServer) {
	s.RegisterService(&Catalogue_ServiceDesc, srv)
}

func _Catalogue_AddListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogueServer).AddListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pad.catalogue.proto.Catalogue/AddListing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogueServer).AddListing(ctx, req.(*AddListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalogue_GetAllListings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogueServer).GetAllListings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pad.catalogue.proto.Catalogue/GetAllListings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogueServer).GetAllListings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalogue_GetListingByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListingByTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogueServer).GetListingByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pad.catalogue.proto.Catalogue/GetListingByTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogueServer).GetListingByTitle(ctx, req.(*GetListingByTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalogue_GetListingByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListingByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogueServer).GetListingByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pad.catalogue.proto.Catalogue/GetListingByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogueServer).GetListingByID(ctx, req.(*GetListingByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Catalogue_ServiceDesc is the grpc.ServiceDesc for Catalogue service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Catalogue_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pad.catalogue.proto.Catalogue",
	HandlerType: (*CatalogueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddListing",
			Handler:    _Catalogue_AddListing_Handler,
		},
		{
			MethodName: "GetAllListings",
			Handler:    _Catalogue_GetAllListings_Handler,
		},
		{
			MethodName: "GetListingByTitle",
			Handler:    _Catalogue_GetListingByTitle_Handler,
		},
		{
			MethodName: "GetListingByID",
			Handler:    _Catalogue_GetListingByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/catalogue/catalogue.proto",
}
